---
title: "Systematic map: Benchmark test"
author: "O'Hara"
format: 
  html:
    code-fold: true
execute:
  echo: true
  warning: false
  message: false
editor: source
---

```{r}
library(tidyverse)
library(here)
library(tidytext)

source(here('common_fxns.R'))
```

## Check benchmarks against Web of Science and Scopus search

```{r load bibtex}
all_fields_df <- load_bibtex(pattern = 'wos_|scopus', aspect = 'wide')
```

```{r}
clean_author <- function(df) {
  c_names <- names(df)[names(df) != 'author']
  
  df1 <- df %>%
    unnest(author) %>%
    group_by(pick({{ c_names }})) %>%
    filter(author == first(author)) %>%
    ungroup() %>%
    mutate(author = tolower(author) %>%    ### drop caps
             str_remove(',.*') %>%         ### keep only last name
             str_remove_all('[^a-z ]') %>% ### drop punct
             str_squish()) %>%             ### drop whitespace
    distinct()
}

clean_title <- function(df) {
  df2 <- df
    
  df1 <- df %>%
    select(author, title, journal, year, doi) %>%
    distinct() %>%
    mutate(title2 = tolower(title) %>%
             str_replace_all('[^a-z0-9]+', ' ') %>%
             str_squish())
  
  df_out <- df2 %>%
    full_join(df1, by = c('author', 'title', 'journal', 'year', 'doi')) %>%
    select(-title, title = title2) %>%
    distinct()
  return(df_out)
}
```

```{r compare to bench}

result_df  <- all_fields_df %>%
  janitor::clean_names() %>%
  select(author, title, journal, year, doi) %>%
  clean_author() %>%
  clean_title() %>%
  mutate(journal = str_remove_all(journal, '[^A-z ]')) %>%
  mutate(across(where(is.character), tolower))

bench_raw_df <- load_bibtex(pattern = 'zot_benchmark_a.bib', aspect = 'wide') %>%
  select(author, title, journal, year, doi)


bench_df <- bench_raw_df %>%
  clean_author() %>%
  clean_title() %>%
  mutate(journal = str_remove_all(journal, '[^A-z ]')) %>%
  mutate(across(is.character, tolower)) %>%
  distinct()

doi_match <- bench_df %>%
  filter(!is.na(doi)) %>%
  filter(doi %in% result_df$doi)

info_match <- bench_df %>%
  select(author, year, title) %>%
  inner_join(result_df) %>%
  distinct()

match_df <- bind_rows(doi_match, info_match) %>%
  select(-doi, -journal) %>%
  distinct()

pct_match <- nrow(match_df) / nrow(bench_df) * 100

missed <- bench_df %>% 
  anti_join(match_df)

knitr::kable(missed %>% select(author, year, title))
```

## Check missed sources

Examining missed sources (Nov 20):

* Not in WoS or Scopus databases (white paper/grey lit?): Cooke, Bernknopf (whales), Kroetz, Mullan

## Hit rate

```{r}
bench_checked_df <- bench_df %>%
  filter(!author %in% c('cooke', 'kroetz', 'mullan')) %>%
  filter(!(author == 'bernknopf' & str_detect(title, 'blue whale')))

hit_rate <- round(nrow(match_df) / nrow(bench_checked_df) * 100)
```

There are `r nrow(bench_checked_df)` articles in the benchmark set that are known to be available in Web of Science and/or Scopus.  The current search terms successfully identify these benchmark articles `r hit_rate`% of the time.

## Pull together results and save out

Save out a cleaned-up version of the Bibtex results, with a smaller number of variables, and duplicates identified and removed.  Only first author included; all text cleaned and lower-cased.  Note also which papers are included in the benchmark set.

```{r}
results_all_df <- load_bibtex(pattern = 'wos_|scopus', aspect = 'long') %>%
  clean_author() %>%
  clean_title() %>%
  mutate(journal = str_replace_all(tolower(journal), '[^A-z0-9]+', ' '))

bench_bool <- bench_checked_df %>%
  select(author, year, title) %>%
  mutate(benchmark = TRUE)

source_df <- results_all_df %>%
  group_by(author, title, journal, year, doi) %>%
  summarize(bibtex_source = paste(unique(bibtex_source), collapse = ';'),
            .groups = 'drop') %>%
  arrange(author, title, -year) %>%
  mutate(doc_id = 1:n()) %>%
  left_join(bench_bool)

clean_results_df <- results_all_df %>%
  select(-bibtex_source) %>%
  left_join(source_df) %>%
  select(-title) %>%
  distinct() %>%
  mutate(benchmark = ifelse(is.na(benchmark), FALSE, benchmark))

### lots of duplicates... 
### * in both Scopus and Web of Science
### * alternate journal names (e.g., New Space vs. New Space: The Journal of Space Entrepreneurship)
### * same first author/title but in different journals/different years
###.    * check multi-authors; are they really the same paper?

check_dupes <- clean_results_df %>%
  filter(field == 'title') %>%
  select(-field, -doc_id, -bibtex_source) %>%
  distinct() %>%
  janitor::get_dupes(author, text)

### select most recent year, anti-join this to check_dupes (to keep duplicates beyond
### that most recent year), and then anti-join *that* to the clean_results_df...
### NOTE: this leaves some doc_id values missing... is that a problem?
keep_dupes_df <- check_dupes %>%
  group_by(author, text) %>%
  arrange(-benchmark, -year, journal) %>%
  slice(1) %>%
  ungroup() %>%
  select(author, text, year, journal, doi)

drop_dupes_df <- check_dupes %>%
  anti_join(keep_dupes_df) %>%
  select(author, text, year, journal, doi) %>%
  inner_join(clean_results_df) %>%
  select(doc_id)

clean_nodupes_df <- clean_results_df %>%
  anti_join(drop_dupes_df)

# clean_nodupes_df %>% filter(field == 'title') %>% .$benchmark %>% sum

write_csv(clean_nodupes_df, here('_data/results_clean.csv'))
```

