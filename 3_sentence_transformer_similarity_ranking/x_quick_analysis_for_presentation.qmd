---
title: "Assemble training set"
author: "O'Hara"
format: 
  html:
    code-fold: true
    embed-resources: true
execute:
  echo: true
  warning: false
  message: false
editor: source
---

This script gathers the citations and appends screening decisions to create a training set.  This training set can be used to create a classification model of some sort.

This script can be run standalone or as a child of another script, to hand the training set to that script.

```{r}
library(tidyverse)
library(here)
library(synthesisr)
```


## Load SBR screening results

Note: `_data/societal_benefits/sbr_screened_results_240429.csv` is the citation screening results out of Colandr; `_output/societal_benefits/fulltext_screened.csv` is the full text screening results (does not include those excluded in the citation screening).

```{r}
make_short_title <- function(title) {
  title %>% tolower() %>% str_replace_all('[^a-z0-9 ]', ' ') %>% str_squish() %>% str_sub(1, 40)
}


sbr_cit_scr_df <- read_csv(here('_data/5a_societal_benefits/sbr_screened_results_240429.csv')) %>%
  mutate(title = stringi::stri_trans_general(title, 'Latin-ASCII') %>% str_to_title(),
         short_title = make_short_title(title)) %>%
  select(title, short_title, abstract, author, year, key, excl_reasons) %>%
  distinct()

sbr_fulltext_df <- read_csv(here('_output/phase1_societal_benefits/fulltext_screened.csv')) %>%
  ### skip author, match by title only?
  select(title, include = screening_decision, author, year, reason_for_exclusion:revisited,
         notes1 = quick_notes) %>%
  mutate(title = stringi::stri_trans_general(title, 'Latin-ASCII') %>% str_to_title(),
         short_title = make_short_title(title),
         include = str_detect(tolower(include), 'include')) %>%
  select(-title, -author, -year)
         
sbr_training <- sbr_cit_scr_df %>%
  left_join(sbr_fulltext_df, by = 'short_title') %>%
  mutate(include = ifelse(is.na(include), FALSE, include),
         src = 'soc_ben_repo')

```

## Load sample screening results

```{r}
### get title/key lookup
sample_info_df <- read_csv(here('_data/3_refs_clean/ref_key_lookup.csv')) %>%
  select(title, key) %>%
  mutate(title = stringi::stri_trans_general(title, 'Latin-ASCII') %>% str_to_title())

sample_cit_scr_df <- read_csv(here('_data/5b_sample_1000/sample_screened_results_240802.csv')) %>%
  mutate(title = stringi::stri_trans_general(title, 'Latin-ASCII') %>% str_to_title()) %>%
  select(title, abstract, author, excl_reasons) %>%
  inner_join(sample_info_df, by = 'title') %>%
  distinct()

sample_fulltext_df <- read_csv(here('_output/phase2_sample_1000/fulltext_screened.csv')) %>%
  ### skip author, match by title only?
  select(title, include = screening_decision,  reason_for_exclusion:applied_science_theme,
         notes1 = quick_notes, notes) %>%
  mutate(title = str_to_title(title),
         include = str_detect(tolower(include), 'include')) %>%
  filter(!is.na(include))

sample_training <- sample_cit_scr_df %>%
  left_join(sample_fulltext_df, by = 'title') %>%
  mutate(include = ifelse(is.na(include), FALSE, include),
         src = 'sample_1000')

```

## Bind together into a training set

```{r}
training_df <- bind_rows(sample_training, sbr_training)

table(training_df %>% select(src, include))
```

## Analyses

Distribution of "includes" by economic method

```{r}
incl_df <- training_df %>% filter(include)

incl_econ <- incl_df %>%
  mutate(econ_method = str_split(econ_method, ';')) %>%
  unnest(econ_method) %>%
  mutate(econ_method = str_squish(econ_method)) %>%
  group_by(econ_method) %>%
  summarize(n = n())

incl_appl <- incl_df %>%
  mutate(applied_science_theme = str_split(applied_science_theme, ';')) %>%
  unnest(applied_science_theme) %>%
  mutate(applied_science_theme = str_squish(applied_science_theme)) %>%
  group_by(applied_science_theme) %>%
  summarize(n = n())

incl_value <- incl_df %>%
  mutate(value_units = str_split(value_units, ';')) %>%
  unnest(value_units) %>%
  mutate(value_units = str_squish(value_units)) %>%
  group_by(value_units) %>%
  summarize(n = n())

incl_esi <- incl_df %>%
  mutate(eo_data = str_split(eo_data, ';')) %>%
  unnest(eo_data) %>%
  mutate(eo_data = str_squish(eo_data)) %>%
  group_by(eo_data) %>%
  summarize(n = n())
```

Excludes:

```{r}
excl_df <- training_df %>% 
  filter(!include) %>%
  mutate(reason_for_exclusion = ifelse(is.na(reason_for_exclusion), excl_reasons, reason_for_exclusion)) %>%
  mutate(reason_for_exclusion = str_remove_all(reason_for_exclusion, '"|\\{|\\}') %>% str_replace_all(',', ';'))

excl_reason <- excl_df %>%
  mutate(reason_for_exclusion = str_split(reason_for_exclusion, ';')) %>%
  unnest(reason_for_exclusion) %>%
  mutate(reason_for_exclusion = str_squish(reason_for_exclusion)) %>%
  group_by(reason_for_exclusion) %>%
  summarize(n = n())


```

