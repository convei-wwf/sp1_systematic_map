---
title: 'Systematic Map: Remove duplicate records'
format: 
  html:
    code-fold: true
    code-summary: "Show me the code"
    embed-resources: true
execute:
  echo: true
  warning: false
  message: false
editor: source
---

```{r setup}
library(tidyverse)
library(tidytext)
library(synthesisr)
library(here)
```

# Summary

This script will ingest Bibtex files of records and:

* check for and resolve duplicated records
* from Web of Science, Scopus, and the CONVEI Zotero Library

# Methods

## Remove duplicates and save out for Colandr ingestion

Pull in all cleaned bibtex data.  Identify duplicates by first author and title.  Save only one version (Web of Science vs Scopus?).  Remove also any documents that have been screened - i.e., the benchmark documents, as these will be uploaded separately (and create duplicates if records still exist in WoS or Scopus uploads).

```{r read in the cleaned bibtex references}
wos_fs <- list.files(here('_data/refs_clean'), pattern = 'wos_', full.names = TRUE)
wos_all <- parallel::mclapply(wos_fs, read_refs, mc.cores = 1) %>% 
  bind_rows() %>% 
  mutate(src = 'wos') 

wos_date <- str_extract(basename(wos_fs), '[0-9]{6}') %>% unique()

wos_distinct <- wos_all %>%
  select(source_type = type, src, author, 
         title, journal, year, abstract, doi,
         contains('keywords'),
         research_areas, web_of_science_categories) %>%
  distinct()

benchmark_all <- read_refs(here('_data/refs_clean/zot_benchmark_a.bib')) %>%
  mutate(src = 'benchmark') %>%
  mutate(title = str_remove_all(title, '\\{\\{|\\}\\}')) %>%
  select(source_type = type, src, author, 
       title, journal, year, abstract, doi,
       contains('keywords'))
```

```{r read in the cleaned ris references}

scopus_fs <- list.files(here('_data/refs_clean'), pattern = 'scopus_', full.names = TRUE)

scopus_date <- str_extract(basename(scopus_fs), '[0-9]{6}') %>% unique()

system.time({
scopus_all <- parallel::mclapply(scopus_fs, read_refs, mc.cores = 1) %>% 
  bind_rows() %>%
  mutate(src = 'scopus') 
})
#    user  system elapsed 
# 660.872   9.182 144.292

scopus_distinct <- scopus_all %>%
  select(source_type, src, author, title, journal = source, year, abstract, doi,
         contains('keywords')) %>%
  distinct()
```

## Clean up

```{r combine and clean up some messy columns}
all_docs <- bind_rows(scopus_distinct, wos_distinct, benchmark_all) %>%
  filter(!is.na(author) & !is.na(title) & !is.na(abstract)) %>%
  mutate(doc_id = 1:n()) 

all_docs_clean <- all_docs %>%
  mutate(first_author = str_remove(tolower(author), ' and .+') %>%
           str_remove('(?<=(, [a-z])).+'),
         title = str_to_title(title),
         abstr_short = tolower(abstract) %>% str_sub(1, 100),
         year = str_extract(year, '[0-9]{4}') %>% as.numeric())
```

## Check benchmark papers

```{r}
bench_check <- all_docs_clean %>%
  group_by(first_author, title) %>%
  filter('benchmark' %in% src) %>%
  mutate(n = n()) %>%
  ungroup() %>%
  select(src, first_author, title, abstract, year, n)

DT::datatable(bench_check)
```

As of Feb. 9, 2024, 13 of 18 papers show up in both WoS and Scopus.  One shows up only in Scopus, but is known to not be available in WoS with direct search.  Four do not show up in either dataset, all known to not be available in either source with direct search.  Therefore, 100% retrieval rate of all papers known to be in each source.

## Filter out duplicates

Here we discard duplicated references, keeping the most recent version (if multiple years) and (arbitrarily) the Web of Science record if found in both sources.   Papers in the benchmark set are also removed so they can be flagged separately as screened papers.

```{r}
all_docs_distinct <- all_docs_clean %>%
  group_by(first_author, title, abstr_short) %>%
  mutate(n = n()) %>%
  ungroup() %>%
  mutate(source_type = str_to_upper(source_type))

dupes_dropped <- all_docs_distinct %>% 
  group_by(first_author, title, abstr_short) %>%
  ### drop any author/title combos that show up in the benchmark set
  filter(!any(src == 'benchmark')) %>%
  arrange(desc(year), desc(src)) %>%
  slice(1) %>%
  ungroup()

```

## Filter out spurious matches

In the beta round of screening, a number of spurious search term matches came up:

* "sentinel": 
    * epidemiology/medicine: study, [lymph] node, site, laboratory, [influenza] surveillance, catalyst, event
    * ecology: species, behavior
* "satellite": account (re: tourism), office, clinic
* "grace": period
* "terra": preta, nova, firme, nullius

Many of these spurious matches relate to cancer or cardiovascular health, unlikely to be related to earth observation, so let's add in 'cancer' and 'cardiac'/'cardiovascular' as potential for spurious matches.

Examine the instances of these in the larger database and drop them unless other valid instances are found (e.g., some cancer studies look at PM2.5 that can potentially be observed using remote sensing).

```{r}
sentinel_terms <- paste('sentinel', 
                        c('study', '(lymph.)?node', 'site', '([a-z]+.)?surveillance', 
                          'species', 'behavior', 'catalyst', 'event'), 
                        sep = '.', collapse = '|')
satellite_terms <- paste('satellite', 
                         c('account', 'office', 'laborator(y|ies)', 'campus',
                           '([a-z]+.)?clinic', '([a-z]+.)?hospital', '([a-z]+.)?cent(er|re)',
                           'lesion', 'nodule', 'mass', 'h(a)?emodialysis'), 
                         sep = '.', collapse = '|')
grace_terms <- 'grace.period'
terra_terms <- paste('terra', c('preta', 'nova', 'firme', 'nullius'), 
                     sep = '.', collapse = '|')
health_terms <- 'cancer|cardiac|cardio'

all_terms <- paste(c(sentinel_terms, satellite_terms, grace_terms, terra_terms, health_terms), collapse = '|')

spurious_match <- dupes_dropped %>%
  filter(str_detect(tolower(title), all_terms) | str_detect(tolower(abstract), all_terms))

### remove "sentinel" as valid match with these spurious matches
valid_terms <- 'satellite|space.based|remote(ly)? observ[a-z]+|earth observation|remote(ly)?.sens[a-z]+|modis|landsat'

### remove the spurious match terms and see if there are any remaining references to satellites/earth observation
spurious_check <- spurious_match %>%
  select(author, year, journal, title, abstract) %>%
  mutate(title2 = str_remove_all(tolower(title), all_terms),
         abstract2 = str_remove_all(tolower(abstract), all_terms)) %>%
  filter(str_detect(title2, valid_terms) | str_detect(abstract2, valid_terms)) %>%
  mutate(title_match = str_extract(title2, valid_terms), abstr_match = str_extract(abstract2, valid_terms))

# x <- spurious_check %>%
#   unnest_tokens(abstr2, abstract2, 'ngrams', n = 3) %>%
#   filter(str_detect(abstr2, '^satellite'))
# x$abstract[43]
### Many of these are still spurious, but the term "satellite" is not immediately
### connected to many useful, unambigious terms that can uniquely identify a spurious
### match...

spurious_match_clean <- spurious_match %>%
  anti_join(spurious_check)

spurious_dropped <- dupes_dropped %>%
  anti_join(spurious_match_clean)

```



## Write out by source

Write out as .ris for easier import into Colandr.

```{r write out cleaned bibliographies}
bench_clean <- all_docs_distinct %>% 
  filter(src == 'benchmark') %>%
  as.data.frame()

write_refs(bench_clean,  format = 'ris',
           file = here('_data/refs_ris_out/bench_clean.ris'))


refs_ready <- spurious_dropped %>%
  select(-first_author, -abstr_short, -doc_id, -n) %>%
  select(where(~ any(!is.na(.))))
  
set.seed(42)
clean_sample_for_title_screen <- refs_ready %>%
  sample_n(1000) %>%
  ### write_refs can't handle tbl?
  as.data.frame() %>%
  select(where(~ any(!is.na(.))))

write_refs(clean_sample_for_title_screen, format = 'ris',
           file = here('_data/refs_ris_out/sample.ris'))


clean_scopus <- refs_ready %>%
  filter(src == 'scopus') %>% select(-src) %>%
  ### write_refs can't handle tbl?
  as.data.frame() %>%
  select(where(~ any(!is.na(.))))

clean_wos <- refs_ready %>%
  filter(src == 'wos') %>% select(-src) %>%
  ### write_refs can't handle tbl?
  as.data.frame() %>%
  select(where(~ any(!is.na(.))))

write_refs(clean_scopus, format = 'ris',
           file = sprintf(here('_data/refs_ris_out/scopus_clean_%s.ris'), scopus_date))
write_refs(clean_wos,    format = 'ris',  
           file = sprintf(here('_data/refs_ris_out/wos_clean_%s.ris'), wos_date))

```


