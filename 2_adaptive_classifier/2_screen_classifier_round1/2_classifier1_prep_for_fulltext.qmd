---
title: "Phase 3: gather and prepare full texts for included items in classifier set 1"
author: "O'Hara"
format: 
  html:
    code-fold: true
    embed-resources: true
execute:
  echo: true
  warning: false
  message: false
editor: source
---

```{r setup}
library(tidyverse)
library(tidytext)
library(synthesisr)
library(pdftools)
library(here)
```

# Summary

After running the classifier model, sampled 200 documents (100 predicted include, 100 predicted exclude) and imported into Colandr for a title/abstract screening, then pull in includes and excludes lists.  Export a .ris of the includes to be ported into Zotero to gather .pdfs.  

# Data

The samples were randomly selected from the classifier-predicted references and saved as a .ris on 9/24/24, and uploaded to Colandr.  The screening criteria outlined in the planning/protocol document were used to determine inclusion/exclusion.  Some documents were tagged with additional information, e.g., "maybe" for some included documents that seemed like they may not actually meet the criteria.

The screening results were downloaded as two .csvs (include, exclude) on Oct 3, 2024.

# Methods

## Consolidate Colandr results

```{r}
col_by_phase_fs <- list.files(here('_data/screened_colandr'), 
                                 pattern = 'colandr_by_phase', full.names = TRUE)
dates <- str_extract(basename(col_by_phase_fs), '[0-9]{4}-[0-9]{2}-[0-9]{2}') %>% as.Date()

f <- col_by_phase_fs[dates == max(dates)]
                     
results_df <- read_csv(f, show_col_types = FALSE) %>%
  filter(phase == 'classifier round 1')

```

## Isolate includes and save as .bib for Zotero

Write out dois as .csv, import into Zotero using the magic wand (add objects by identifier) to auto grab PDFs.  For ones that Zotero does not automatically find .pdfs, use Google Scholar to see if other pdfs are available.  If behind a paywall (inaccessible from UCSB library) or no DOI then the paper will not be included in the full text screening.

NOTES:

* Colandr seems to fuck up the author order by alphabetizing when exporting...
* Use VPN to log into UCSB account for more likely retrieval?
* Here, we use the Colandr results to identify DOIs that are included.  We find the original cleaned sample refs and filter to the relevant DOIs and then save that out as a .bib.  
* Note that this round of 200, actually includes 400, since a few were left in the Colandr system after the 1000-sample screening.  So load both sets!


```{r}
sample_refs <- read_refs(here('_data/1c_refs_clean/sample/sample_1000_240708.ris'))
cls200_refs <- read_refs(here('_data/4_screen_classifier_round1/ris_to_colandr_classifier_round1_sample_200.ris'))

incl_df <- results_df %>%
  filter(screening_status == 'included' & !is.na(doi))

sample_incl <- sample_refs %>% bind_rows(cls200_refs) %>% filter(doi %in% incl_df$doi)

write_refs(sample_incl, format = 'bib', 
           file = here('_data/4_screen_classifier_round1/bib_to_zotero_cls_round1.bib'))


# check <- read_refs(here('_data/4_screen_classifier_round1/incl_bib_to_zotero.bib'))
# x <- anti_join(sample_incl, check, by = 'doi')
```


## Import full texts into Zotero

Pulling the DOI information from these papers, and importing into Zotero via the "add item(s) by identifier" option, downloads (where possible) the PDFs into a designated subcollection.  Checking the successfully downloaded DOIs against the full list, we can identify those references not found via DOI.

```{r}
zot_check <- read_refs(here('_data/4_screen_classifier_round1/bib_from_zotero_cls_round1.bib')) %>%
  mutate(title_check = str_remove_all(tolower(title), '[[:punct:]]') %>% str_squish(),
         doi = tolower(doi))

pdf_find <- zot_check %>% filter(is.na(file))
```

Out of `r nrow(incl_df)` included papers, `r nrow(zot_check)` have records in Zotero; of these, `r nrow(pdf_find)` do(es) not have a .pdf available.

Out of 77 items, 38 did not automatically find .pdfs.  For 33 of these, pdfs were found manually; of the other five, two were in Chinese, two were behind paywalls, and one was not found.


## Write out temp csv for full text screening

```{r}
fulltext_df <- sample_incl %>%
  select(title, author, year, doi, notes) %>%
  mutate(phase = 'classifier round 1',
         screening_decision = NA,
         reason_for_exclusion = NA,
         quick_notes = NA,
         soc_method = NA,
         societal_benefit = NA,
         value_units = NA,
         eo_data = NA,
         applied_science_theme = NA,
         notes = NA)

write_csv(fulltext_df, here('_data/screened_fulltext/3_tmp_classifier_round1.csv'))
```


