---
title: "Sankey diagram of includes/excludes by phase"
author: "O'Hara"
format: 
  html:
    code-fold: true
    embed-resources: true
execute:
  echo: true
  warning: false
  message: false
editor: source
---

```{r setup}
library(tidyverse)
library(here)
library(networkD3)
library(ggsankey)
library(cowplot)
```

# Summary

## Initial cleaning

### using ggsankey or ggalluvial

Four axes for the initial retrieval and prep

```{r}
prep_df <- tribble(
  ~src,          ~conf_miss,       ~dupes,         ~spurious,   ~n,
  'sbl',          'include',    'include',         'include',  258,
  'scopus',       'include',    'include',         'include', 6219,
  'scopus',       'include',    'include',  'spurious match',  629,
  'scopus',       'include', 'duplicates',                NA, 6402,
  'scopus', 'conf abstract',           NA,                NA, 4109,
  'scopus',  'missing info',           NA,                NA, 1226,
  'wos',          'include',    'include',         'include', 7346,
  'wos',          'include',    'include',  'spurious match',  355,
  'wos',          'include', 'duplicates',                NA,  438,
  'wos',    'conf abstract',           NA,                NA, 1030,
  'wos',     'missing info',           NA,                NA,  319
) %>%
  uncount(n)
```

Funky stuff with node names.  The left hand side responds to factor recoding; the right hand side does not, and loses the connection (since the "next node" changes?).  Releveling the RHS causes the flow to cross over itself awkwardly, get order right ahead of time.  Use spaces to force level order on the RHS.
```{r}
links_long <- prep_df %>%
  mutate(rhs = case_when(conf_miss != 'include' ~ conf_miss,
                         dupes     != 'include' ~ dupes,
                         spurious  != 'include' ~ spurious,
                         TRUE ~ 'include')) %>%
  mutate(rhs = case_when(str_detect(rhs, 'dupl') ~ 'Duplicates (n = 6,840)',
                         str_detect(rhs, 'conf') ~ 'Conference\n  abstracts (n = 5,139)',
                         str_detect(rhs, 'miss') ~ 'Missing info (n = 1,545)',
                         str_detect(rhs, 'spur') ~ 'Spurious match (n = 984)',
                         TRUE                    ~ 'Include (n = 13,823)')) %>%
  ### for "include" add a non-breaking space, which is alpha after regular space
  mutate(rhs = ifelse(str_detect(tolower(rhs), 'include'), paste0(' \u00a0', rhs), paste0('  ', rhs))) %>%
  mutate(rhs = str_replace(rhs, '\\(n', '\n  (n')) %>%
  
  ggsankey::make_long(src, rhs) %>%
  mutate(node = factor(node),
         ### put sbl on top (last level)
         node = fct_relevel(node, 'sbl', after = Inf),
         node = fct_recode(node, '  Societal Benefit\n  Library (n = 258)' = 'sbl', 
                                 '  Scopus\n  (n = 18,585)' = 'scopus', 
                                 '  Web of Science\n  (n = 9,488)' = 'wos'))

sankey_prep_plot <- ggplot(data = links_long,
       aes(x = x, next_x = next_x, node = node, next_node = next_node, fill = node)) +
  geom_sankey(flow.alpha = 0.5, node.fill = 'black',
              width = .015, show.legend = FALSE) +
  geom_sankey_text(aes(label = node), angle = 0, hjust = 0, size = 2.2) +
  scale_fill_viridis_d() +
  theme_void()

# ggsave('fig1a_sankey_prep.png', width = 6, height = 4, dpi = 300)
# 
# knitr::include_graphics('fig1a_sankey_prep.png')
```

## By screening phase

Load refs at various phases.  Include:

* SBR start
* Training set start
* Classification set start

* Colandr includes
* Colandr excludes
* Colandr not loaded (deprioritized)

* Full text includes
* Full text excludes
* Full text not done

NOTE: some in the early stages were revisited after rejecting in Colandr for "not ESI" when we expanded the scope of ESI, and subsequently added to full text review.  Identify those and switch the Colandr screening status to "include" to resolve the dilemma.

```{r}
### define a function to clean titles of caps, diacritics, etc for easier matching
clean_title <- function(t) {
  tolower(t) %>%
    stringi::stri_trans_general('Latin-ASCII') %>% ### drop diacritics
    str_remove_all('[^a-z0-9 ]+') %>% ### drop punctuation
    str_squish() %>%
    str_sub(1, 60)
}
```

```{r}
ft_fs <- list.files(here('_data/screened_fulltext'), pattern = '_fulltext_', full.names = TRUE) 
ft_df <- ft_fs %>%
  lapply(read_csv, show_col_types = FALSE) %>%
  setNames(str_remove_all(basename(ft_fs), '._fulltext_|.csv')) %>%
  bind_rows(.id = 'phase') 

ft_sbr <- ft_df %>%
  filter(phase == 'sbr') %>%
  mutate(title2 = clean_title(title))

col_df <- read_csv(here('_data/screened_colandr/colandr_by_phase.csv'), show_col_types = FALSE) %>%
  mutate(phase = case_when(phase == 'classifier round 1' ~ 'training',
                           phase == 'early' ~ 'training',
                           phase == 'sample 1000' ~ 'training',
                           phase == 'classifier excl sample' ~ phase,
                           str_detect(phase, 'class') ~ 'pred_incl',
                           TRUE ~ phase)) %>%
  mutate(fix = clean_title(title) %in% ft_sbr$title2 & 
           screening_status == 'excluded') %>%
  mutate(screening_status = ifelse(fix, 'included', screening_status)) %>%
  select(-fix)

col_totals_df <- col_df %>%
  group_by(screening_status) %>%
  summarize(n = n(), .groups = 'drop')

col_phase_df <- col_df %>%
  group_by(phase, screening_status) %>%
  summarize(n = n(), .groups = 'drop')


ft_totals_df <- ft_df %>%
  group_by(screening_decision) %>%
  summarize(n = n(), .groups = 'drop')

ft_phase_df <- ft_df %>%
  mutate(phase = case_when(phase == 'classifier_round1' ~ 'training',
                           phase == 'sample1000' ~ 'training',
                           phase == 'classifier excl sample' ~ phase,
                           str_detect(phase, 'class') ~ 'pred_incl',
                           TRUE ~ phase)) %>%
  group_by(phase, screening_decision) %>%
  summarize(n = n(), .groups = 'drop')


pred_round2 <- read_csv(here('_data/classifier_results',
                             'predicted_classifier_round2_set.csv'),
                        show_col_types = FALSE)
table(pred_round2$classification_prediction)

total <- read_csv(here('_data/1c_refs_clean/ref_key_lookup.csv'),
                  show_col_types = FALSE)
# col_ct <- sum(col_df$n)
# ft_ct <- sum(ft_df$n)
```

### Totals for Colandr

* 3813 screened in Colandr
  * 777 included
    * 144 SBR
    * 144 training
    * 489 pred include
    * (13 final check - drop these)
  * 2837 excluded
    * 111 SBR
    * 928 training
    * 1798 pred include
    * (186 final check - drop these)

Totals by phase

* 258 SBR
* 1072 training
* 2287 predicted includes
* 10,206 predicted excludes
  * 200 screened to check
  * 10,006 not screened

### Totals for Full Text

* 170 includes
  * 73 SBR
  * 13 training
  * 84 predicted includes
* 590 excluded
  * 66 SBR
  * 119 training
  * 405 predicted includes

### using ggsankey or ggalluvial

Four axes for the initial retrieval and prep

```{r}
screen_df <- tribble(
  ~src,          ~colandr,   ~fulltext,    ~n,
  'sbl',        'include',   'include',    73,
  'sbl',        'include',   'exclude',    54,
  'sbl',        'include',   'no retr',     3,
  'sbl',        'exclude',          NA,   128,
  'train',      'include',   'include',     7,
  'train',      'include',   'exclude',   130,
  'train',      'include',   'no retr',     7,
  'train',      'exclude',          NA,   928,
  'pred_incl',  'include',   'include',    84,
  'pred_incl',  'include',   'exclude',   395,
  'pred_incl',  'include',   'no retr',    10,
  'pred_incl',  'exclude',          NA,  1798,
  'pred_excl',    'check',          NA,   200,
  'pred_excl', 'noscreen',          NA, 10006,
) %>%
  uncount(n)
```

Funky stuff with node names.  The left hand side responds to factor recoding; the right hand side does not, and loses the connection (since the "next node" changes?).  Releveling the RHS causes the flow to cross over itself awkwardly, get order right ahead of time.  Use spaces to force level order on the RHS.
```{r}
links_long <- screen_df %>%
  mutate(colandr  = case_when(colandr == 'check' ~ 'Title/abstract\n  exclude (n =  200)',
                              colandr == 'include' ~ 'Title/abstract\n  include (n =  770)',
                              colandr == 'exclude' ~ 'Title/abstract\n  exclude (n = 2,854)',
                              TRUE ~ 'Not screened (n = 10,006)')) %>%
  mutate(fulltext = case_when(fulltext == 'exclude' ~ 'Full text exclude (n = 580)',
                              fulltext == 'include' ~ 'Full text include (n = 170)',
                              fulltext == 'no retr' ~ 'Not retrievable (n = 20)',
                              TRUE ~ 'a')) %>%
  mutate(colandr  = paste0('  ', colandr),
         fulltext = paste0('  ', fulltext)) %>%
  mutate(colandr  = str_replace(colandr, '\\(n', '\n  (n'),
         fulltext = str_replace(fulltext, '\\(n', '\n  (n')) %>%
  ggsankey::make_long(src, colandr, fulltext) %>%
  mutate(next_node = ifelse(next_node == '  a', NA, next_node)) %>%
  filter(node != '  a') %>%
  mutate(node = factor(node),
         ### put sbl on top (last level)
         node = fct_relevel(node, 'sbl', after = Inf),
         node = fct_recode(node, '  Societal Benefit\n  Library (n = 258)' = 'sbl', 
                                 '  Training set\n  (n = 1,072)' = 'train', 
                                 '  Predicted include\n  (n = 2,287)' = 'pred_incl', 
                                 '  Predicted exclude\n  (n = 10,206)' = 'pred_excl'))


sankey_screen_plot <- ggplot(data = links_long,
       aes(x = x, next_x = next_x, node = node, next_node = next_node, fill = node)) +
  geom_sankey(flow.alpha = 0.5, node.fill = 'black',
              width = .015, show.legend = FALSE) +
  geom_sankey_text(aes(label = node), angle = 0, hjust = 0, size = 2.2) +
  scale_fill_viridis_d() +
  theme_void()

# ggsave('fig1b_sankey_screen.png', width = 6, height = 4, dpi = 300)
# 
# knitr::include_graphics('fig1b_sankey_screen.png')
```

## Combine into two panel figure

```{r}
poly_df <- data.frame(
  x = c(0.0, 1.0, 1.0, 0.0, 0.0),
  y = c(1.0, 1.0, 0.0, 0.63, 1.0)
)

# Create a ggplot object and draw the polygon
p1 <- ggplot(poly_df, aes(x, y)) +
  geom_polygon(fill = "grey", alpha = 0.5) +
  theme_void()

two_panel <- ggdraw() +
  draw_plot(p1, x = .292, y = 0, width = .145, height = 1) +
  draw_plot(sankey_prep_plot, x = -.14, y = 0, width = .6, height = 1) +
  draw_plot(sankey_screen_plot, x = .30, y = 0, width = .70, height = 1) +
  draw_label('A', x = 0, y = .98, vjust = 1, hjust = 0, size = 10, fontface = 'bold') +
  draw_label('B', x = .4, y = .98, vjust = 1, hjust = 0, size = 10, fontface = 'bold')
  
ggsave('fig1_sankey_prep_screen.png', width = 6, height = 4, dpi = 300)

knitr::include_graphics('fig1_sankey_prep_screen.png')
```

