---
title: "Examine search term frequencies"
author: "O'Hara"
format: 
  html:
    code-fold: true
    code-summary: "Show me the code"
execute:
  echo: true
  warning: false
  message: false
editor: source
---

```{r setup}
library(tidyverse)
library(here)
library(tidytext)

source(here('common_fxns.R'))
```

## Load search results

```{r load bibtex}
topic_df <- load_articles(pattern = 'wos_')
```

## Examine term frequency across abstracts

Across all abstracts, identify most commonly used words (whether keywords or search terms or otherwise), using a $tf-idf$ (term frequency x inverse doc frequency) approach, where 
$$tf_{\text{word}} = \frac{n_{\text{word}}} {n_{\text{all words}}}$$
and 
$$idf = \ln \left(\frac{n_{\text{abstracts}}}{n_{\text{abstracts containing term}}}\right)$$
or in other words,
$$idf = - \ln \left(\frac{n_{\text{abstracts containing terms}}}{n_{\text{abstracts}}}\right)$$

The product $tf \times idf$ indicates words that are relatively important to one abstract (based on frequency of the term within that abstract) within the overall collection of abstracts (based on how infrequently the term shows up in other abstracts).  Terms that show up in all abstracts (e.g., stop words) will have an $idf \rightarrow 0$ equal to or near 0, as the ratio $\rightarrow 1$.

```{r}
abstr_df <- topic_df %>%
  filter(topic == 'abstract') %>%
  select(title, text)
  
abstr_words <- abstr_df %>%
  unnest_tokens(input = text, output = word, token = 'words') %>%
  group_by(title, word) %>%
  summarize(n = n()) %>%
  group_by(title) %>%
  mutate(term_freq = n / sum(n)) %>%
  ungroup()
```

### Plot rank vs frequency

```{r}
abstr_freq_by_rank <- abstr_words %>%
  group_by(title) %>%
  arrange(desc(term_freq)) %>%
  mutate(rank = 1:n()) %>%
  ungroup()

rank_subset <- abstr_freq_by_rank %>% 
  filter(rank < 50)

freq_rank_lm <- lm(log10(term_freq) ~ log10(rank), data = rank_subset)
# Coefficients:
# (Intercept)  log10(rank)  
#     -1.1059      -0.7098

ggplot(abstr_freq_by_rank, 
       aes(x = rank, y = term_freq, color = title)) +
  geom_line(alpha = .1, linewidth = .1, show.legend = FALSE) +
  geom_abline(intercept = freq_rank_lm$coefficients[1],
              slope = freq_rank_lm$coefficients[2],
              linetype = 'dashed') +
  scale_x_log10() +
  scale_y_log10()
```

Zipf's law: Frequency of a word is inversely proportional to rank... log-log plot shows a (basically) constant slope of `r round(freq_rank_lm$coefficients[2], 3)` for terms ranked less than 50.

### Calculate $idf$ and $tf-idf$

```{r}
abstr_idf <- abstr_words %>%
  mutate(n_titles = n_distinct(title)) %>%
  group_by(word) %>%
  summarize(idf = -log(n_distinct(title) / first(n_titles)))

abstr_tf_idf <- abstr_words %>%
  left_join(abstr_idf, by = c('word')) %>%
  mutate(tf_idf = term_freq * idf) %>%
  arrange(desc(tf_idf))
  
head(abstr_tf_idf, 50)

```
