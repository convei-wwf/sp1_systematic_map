---
title: 'Systematic Map: Remove duplicate records'
format: 
  html:
    code-fold: true
    code-summary: "Show me the code"
    embed-resources: true
execute:
  echo: true
  warning: false
  message: false
editor: source
---

```{r setup}
library(tidyverse)
library(tidytext)
library(bib2df) ### use dev version: remotes::install_github("ropensci/bib2df")
library(synthesisr)
library(here)

source(here('common_fxns.R'))
```

# Summary

This script will ingest Bibtex files of records and:

* check for and resolve duplicated records
* from Web of Science, Scopus, and the CONVEI Zotero Library

# Methods

## Remove duplicates and save out for Colandr ingestion

Pull in all cleaned bibtex data.  Identify duplicates by first author and title.  Save only one version (Web of Science vs Scopus?).  Remove also any documents that have been screened - i.e., the benchmark documents, as these will be uploaded separately (and create duplicates if records still exist in WoS or Scopus uploads).

```{r read in the cleaned bibtex references}
wos_fs <- list.files(here('_data/refs_clean'), pattern = 'wos_', full.names = TRUE)
wos_all <- parallel::mclapply(wos_fs, read_refs, mc.cores = 5) %>% 
  bind_rows() %>% 
  mutate(src = 'wos') 

wos_distinct <- wos_all %>%
  select(type, src, author, 
         title, journal, year, abstract, doi,
         contains('keywords'),
         research_areas, web_of_science_categories) %>%
  distinct()

benchmark_all <- read_refs(here('_data/refs_clean/zot_benchmark_a.bib')) %>%
  mutate(src = 'benchmark') %>%
  mutate(title = str_remove_all(title, '\\{\\{|\\}\\}')) %>%
  select(type, src, author, 
       title, journal, year, abstract, doi,
       contains('keywords'))
```

```{r read in the cleaned ris references}

scopus_fs <- list.files(here('_data/refs_clean'), pattern = 'scopus_', full.names = TRUE)

system.time({
scopus_all <- parallel::mclapply(scopus_fs, read_refs, mc.cores = 5) %>% 
  bind_rows() %>%
  mutate(src = 'scopus') 
})
#    user  system elapsed 
# 660.872   9.182 144.292

scopus_distinct <- scopus_all %>%
  select(type = source_type, src, author, title, journal = source, year, abstract, doi,
         contains('keywords')) %>%
  distinct()
```

## Clean up

```{r combine and clean up some messy columns}
all_docs <- bind_rows(scopus_distinct, wos_distinct, benchmark_all) %>%
  filter(!is.na(author) & !is.na(title) & !is.na(abstract)) %>%
  mutate(doc_id = 1:n()) 

all_docs_clean <- all_docs %>%
  mutate(first_author = str_remove(tolower(author), ' and .+') %>%
           str_remove('(?<=(, [a-z])).+'),
         title = tolower(title),
         abstr_short = tolower(abstract) %>% str_sub(1, 100),
         year = str_extract(year, '[0-9]{4}') %>% as.numeric())
```

## Check benchmark papers

```{r}
bench_check <- all_docs_clean %>%
  group_by(first_author, title) %>%
  filter('benchmark' %in% src) %>%
  mutate(n = n()) %>%
  ungroup() %>%
  select(src, first_author, title, abstract, year, n)

DT::datatable(bench_check)
```

As of Feb. 9, 2024, 13 of 18 papers show up in both WoS and Scopus.  One shows up only in Scopus, but is known to not be available in WoS with direct search.  Four do not show up in either dataset, all known to not be available in either source with direct search.  Therefore, 100% retrieval rate of all papers known to be in each source.

## Filter out duplicates

Here we discard duplicated references, keeping the most recent version (if multiple years) and (arbitrarily) the Web of Science record if found in both sources.   Papers in the benchmark set are also removed so they can be flagged separately as screened papers.

```{r}
all_docs_distinct <- all_docs_clean %>%
  group_by(first_author, title, abstr_short) %>%
  mutate(n = n()) %>%
  ungroup()

dupes_dropped <- all_docs_distinct %>% 
  group_by(first_author, title, abstr_short) %>%
  ### drop any author/title combos that show up in the benchmark set
  filter(!any(src == 'benchmark')) %>%
  arrange(desc(year), desc(src)) %>%
  slice(1) %>%
  ungroup()
```

## Write out by source

```{r write out cleaned bibliographies}
clean_scopus <- dupes_dropped %>%
  filter(src == 'scopus') %>%
  select(-first_author, -title, -src, -doc_id, -n) %>%
  select(where(~ any(!is.na(.))))

clean_wos <- dupes_dropped %>%
  filter(src == 'wos') %>%
  select(-first_author, -title, -src, -doc_id, -n) %>%
  select(where(~ any(!is.na(.))))

clean_bench <- bench_out %>%
  filter(src == 'benchmark') %>%
  select(-first_author, -title, -src, -doc_id, -n) %>%
  select(where(~ any(!is.na(.)))) 

df2bib(clean_scopus, here('_data/output_for_colandr/scopus_clean_240109.bib'))
df2bib(clean_wos,    here('_data/output_for_colandr/wos_clean_240126.bib'))
df2bib(clean_bench,  here('_data/output_for_colandr/bench_clean_240109.bib'))

```


